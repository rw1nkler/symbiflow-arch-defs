#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# symbiflow-arch-defs documentation build configuration file, created by
# sphinx-quickstart on Thu Oct 18 14:29:14 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.append(os.path.abspath("./_ext"))


import subprocess
subprocess.run("pip3 list", shell=True)
subprocess.run("which pip", shell=True)
subprocess.run("which pip3", shell=True)
subprocess.run("which python", shell=True)
subprocess.run("which python3", shell=True)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '3.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.

# yapf: disable
extensions = [
    'sphinx.ext.autodoc',
    'sphinxcontrib.images',
    'symbolator_sphinx',
    'sphinxcontrib_hdl_diagrams',
    'arch_def_collectors'
]
# yapf: enable

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'symbiflow-arch-defs'
copyright = '2018, Various'
author = 'Various'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['env']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'default'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_materialdesign_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
html_theme_options = {
    # Specify a list of menu in Header.
    # Tuples forms:
    #  ('Name', 'external url or path of pages in the document', boolean, 'icon name')
    #
    # Third argument:
    # True indicates an external link.
    # False indicates path of pages in the document.
    #
    # Fourth argument:
    # Specify the icon name.
    # For details see link.
    # https://material.io/icons/
    'header_links':
        [
            ('Home', 'index', False, 'home'),
            (
                "GitHub", "https://github.com/SymbiFlow/symbiflow-arch-defs",
                True, 'link'
            )
        ],

    # Customize css colors.
    # For details see link.
    # https://getmdl.io/customize/index.html
    #
    # Values: amber, blue, brown, cyan deep_orange, deep_purple, green, grey, indigo, light_blue,
    #         light_green, lime, orange, pink, purple, red, teal, yellow(Default: indigo)
    'primary_color': 'deep_purple',
    # Values: Same as primary_color. (Default: pink)
    'accent_color': 'purple',

    # Customize layout.
    # For details see link.
    # https://getmdl.io/components/index.html#layout-section
    'fixed_drawer': True,
    'fixed_header': True,
    'header_waterfall': True,
    'header_scroll': False,

    # Render title in header.
    # Values: True, False (Default: False)
    'show_header_title': False,
    # Render title in drawer.
    # Values: True, False (Default: True)
    'show_drawer_title': True,
    # Render footer.
    # Values: True, False (Default: True)
    'show_footer': True
}

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'symbiflow-arch-defsdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc, 'symbiflow-arch-defs.tex',
        'symbiflow-arch-defs Documentation', 'Various', 'manual'
    ),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        master_doc, 'symbiflow-arch-defs', 'symbiflow-arch-defs Documentation',
        [author], 1
    )
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc, 'symbiflow-arch-defs', 'symbiflow-arch-defs Documentation',
        author, 'symbiflow-arch-defs', 'One line description of project.',
        'Miscellaneous'
    ),
]

hdl_diagram_yosys = "system"

# --- Generated Sources ------------------------------------------------------

# Model collector setup

# NOTE: Diagram generation for some models is skipped using due to
#       netlistSVG limitation: https://github.com/nturley/netlistsvg/issues/82

prjxray_model_collector_config = {
    "generatedir": os.path.realpath("generated/prjxray/models"),
    "searchdirs": ["xc/common/primitives"],
}

icestorm_model_collector_config = {
    "generatedir": os.path.realpath("generated/ice40/models"),
    "searchdirs": ["ice40"],
    "skip_diagrams": ["sb_pio"]
}

ecp5_model_collector_config = {
    "generatedir": os.path.realpath("generated/ecp5/models"),
    "searchdirs": ["ecp5/primitives"],
    "skip_diagrams": ["BB", "CCU2C", "OBZ", "TRELLIS_IO", "sb_pio"],
}

model_collector_config = {
    "repository_root":
        os.path.realpath(".."),
    "projects":
        [
            prjxray_model_collector_config, icestorm_model_collector_config,
            ecp5_model_collector_config
        ]
}

# Architecture collector setup

icestorm_arch_collector_config = {
    "generatedir": os.path.realpath("generated/ice40/arch"),
    "searchdirs": ["ice40"],
}

arch_collector_config = {
    "repository_root": os.path.realpath(".."),
    "projects": [icestorm_arch_collector_config]
}


def setup(app):
    app.emit("collectors_generate_arch", arch_collector_config)
    app.emit("collectors_generate_model", model_collector_config)
